function [reconstOutp] = PVSynthesis(Mag, Phase, anHop, synthHop)
% PVocoder Synthesis 

% Precompute constants 
pi2 = 2 * pi; 
[numFrames, numBins] = size(Mag); 
binFreqs = pi2 .* (0 : numBins - 1) ./ numBins;
phShiftFactor = anHop * binFreqs;
nPhase = zeros(numFrames, numBins); 
synPhase = zeros(numFrames, numBins);
instFreq = zeros(numFrames, numBins); 
synthOut = zeros(numFrames, numBins);
reconstrWins = zeros(numFrames, numBins); 
reconstOutp = zeros(1, 65536); % Hard-coded for testing

% Loop over frames and calculate instantaneous frequency 
for i = 2 : numFrames 
    % Phase Difference 
    nPhase(i, :) = Phase(i, :) - Phase(i - 1, :);
    % Subtract off phase shift factor (Heterodyned phase) 
    nPhase(i, :) = nPhase(i, :) - phShiftFactor;
    % Take principal determination of phase (I think wraptopi works here)
    nPhase(i, :) = wrapToPi(nPhase(i, :));
    % Instantaneous Frequency 
    instFreq(i, :) = binFreqs + nPhase(i, :) / anHop;
end  
% TODO: THIS
% Phase propagation for time-scaling (maybe add resynth here)  
start = 1; 
mid = start + synthHop; 
lst = mid + synthHop / 2; 
for j = 2 : numFrames 
    synPhase(j, :) = synPhase(j - 1, :) + synthHop * instFreq(j, :); 
    synthOut(j, :) = Mag(j, :) + synPhase(j, :); 
    reconstrWins(j, :) = ifft(fftshift(synthOut(j, :)));  
    reconstOutp(1, start:mid-1) = reconstOutp(1, start:mid-1) + ...
                                  reconstrWins(j, 1 : synthHop / 2); 
    reconstOutp(1, mid+1: lst) = reconstrWins(j, synthHop/2+1:end);
    % Update start pointer
    start = (j - 1) * synthHop; 
    mid = start + synthHop; 
    lst = mid + synthHop / 2;
end 
% Resynthesis loop
%


end